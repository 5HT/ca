%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.21
%% Purpose: Encoding and decoding of the types in CMSECCAlgs-2009-02.

-module('CMSECCAlgs-2009-02').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("CMSECCAlgs-2009-02.hrl").
-asn1_info([{vsn,'5.0.21'},
            {module,'CMSECCAlgs-2009-02'},
            {options,[warnings,ber,errors,
 {cwd,"/Users/maxim/depot/synrc/ca/priv/cms"},
 {outdir,"/Users/maxim/depot/synrc/ca/priv/cms"},
 {i,"."},
 {i,"/Users/maxim/depot/synrc/ca/priv/cms"}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_KeyWrapAlgorithm/2,
enc_MQVuserKeyingMaterial/2,
'enc_ECC-CMS-SharedInfo'/2
]).

-export([
dec_KeyWrapAlgorithm/2,
dec_MQVuserKeyingMaterial/2,
'dec_ECC-CMS-SharedInfo'/2
]).

-export([
'enc_kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3,
'enc_kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3,
'enc_kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3,
'enc_kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3,
'enc_kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3,
'enc_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3,
'enc_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3,
'enc_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3,
'enc_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3,
'enc_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3,
'enc_kaa-mqvSinglePass-sha1kdf-scheme'/3,
'enc_kaa-mqvSinglePass-sha224kdf-scheme'/3,
'enc_kaa-mqvSinglePass-sha256kdf-scheme'/3,
'enc_kaa-mqvSinglePass-sha384kdf-scheme'/3,
'enc_kaa-mqvSinglePass-sha512kdf-scheme'/3,
'enc_maca-hMAC-SHA224'/3,
'enc_maca-hMAC-SHA256'/3,
'enc_maca-hMAC-SHA384'/3,
'enc_maca-hMAC-SHA512'/3,
'enc_opka-ec'/3,
'enc_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3,
'enc_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3,
'enc_cap-kaa-mqvSinglePass-sha1kdf-scheme'/3,
'enc_cap-kaa-mqvSinglePass-sha224kdf-scheme'/3,
'enc_cap-kaa-mqvSinglePass-sha256kdf-scheme'/3,
'enc_cap-kaa-mqvSinglePass-sha384kdf-scheme'/3,
'enc_cap-kaa-mqvSinglePass-sha512kdf-scheme'/3,
'enc_cap-hMAC-SHA224'/3,
'enc_cap-hMAC-SHA256'/3,
'enc_cap-hMAC-SHA384'/3,
'enc_cap-hMAC-SHA512'/3
]).

-export([
'dec_kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3,
'dec_kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3,
'dec_kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3,
'dec_kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3,
'dec_kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3,
'dec_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3,
'dec_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3,
'dec_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3,
'dec_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3,
'dec_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3,
'dec_kaa-mqvSinglePass-sha1kdf-scheme'/3,
'dec_kaa-mqvSinglePass-sha224kdf-scheme'/3,
'dec_kaa-mqvSinglePass-sha256kdf-scheme'/3,
'dec_kaa-mqvSinglePass-sha384kdf-scheme'/3,
'dec_kaa-mqvSinglePass-sha512kdf-scheme'/3,
'dec_maca-hMAC-SHA224'/3,
'dec_maca-hMAC-SHA256'/3,
'dec_maca-hMAC-SHA384'/3,
'dec_maca-hMAC-SHA512'/3,
'dec_opka-ec'/3,
'dec_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3,
'dec_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3,
'dec_cap-kaa-mqvSinglePass-sha1kdf-scheme'/3,
'dec_cap-kaa-mqvSinglePass-sha224kdf-scheme'/3,
'dec_cap-kaa-mqvSinglePass-sha256kdf-scheme'/3,
'dec_cap-kaa-mqvSinglePass-sha384kdf-scheme'/3,
'dec_cap-kaa-mqvSinglePass-sha512kdf-scheme'/3,
'dec_cap-hMAC-SHA224'/3,
'dec_cap-hMAC-SHA256'/3,
'dec_cap-hMAC-SHA384'/3,
'dec_cap-hMAC-SHA512'/3
]).

-export([
getenc_KeyAgreementAlgs/1,
getenc_KeyWrapAlgs/1,
getenc_MessageAuthAlgs/1,
getenc_OriginatorPKAlgorithms/1,
getenc_SMimeCAPS/1,
getenc_internal_object_set_argument_2/1
]).

-export([
getdec_KeyAgreementAlgs/1,
getdec_KeyWrapAlgs/1,
getdec_MessageAuthAlgs/1,
getdec_OriginatorPKAlgorithms/1,
getdec_SMimeCAPS/1,
getdec_internal_object_set_argument_2/1
]).

-export([
'x9-63-scheme'/0,
'secg-scheme'/0,
'dhSinglePass-stdDH-sha1kdf-scheme'/0,
'dhSinglePass-stdDH-sha224kdf-scheme'/0,
'dhSinglePass-stdDH-sha256kdf-scheme'/0,
'dhSinglePass-stdDH-sha384kdf-scheme'/0,
'dhSinglePass-stdDH-sha512kdf-scheme'/0,
'dhSinglePass-cofactorDH-sha1kdf-scheme'/0,
'dhSinglePass-cofactorDH-sha224kdf-scheme'/0,
'dhSinglePass-cofactorDH-sha256kdf-scheme'/0,
'dhSinglePass-cofactorDH-sha384kdf-scheme'/0,
'dhSinglePass-cofactorDH-sha512kdf-scheme'/0,
'mqvSinglePass-sha1kdf-scheme'/0,
'mqvSinglePass-sha224kdf-scheme'/0,
'mqvSinglePass-sha256kdf-scheme'/0,
'mqvSinglePass-sha384kdf-scheme'/0,
'mqvSinglePass-sha512kdf-scheme'/0,
'id-hmacWithSHA224'/0,
'id-hmacWithSHA256'/0,
'id-hmacWithSHA384'/0,
'id-hmacWithSHA512'/0
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try
   Result = decode_disp(Type, element(1, ber_decode_nif(Data))),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('KeyWrapAlgorithm', Data) -> enc_KeyWrapAlgorithm(Data);
encode_disp('MQVuserKeyingMaterial', Data) -> enc_MQVuserKeyingMaterial(Data);
encode_disp('ECC-CMS-SharedInfo', Data) -> 'enc_ECC-CMS-SharedInfo'(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('KeyWrapAlgorithm', Data) -> dec_KeyWrapAlgorithm(Data);
decode_disp('MQVuserKeyingMaterial', Data) -> dec_MQVuserKeyingMaterial(Data);
decode_disp('ECC-CMS-SharedInfo', Data) -> 'dec_ECC-CMS-SharedInfo'(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  KeyWrapAlgorithm
%%================================
enc_KeyWrapAlgorithm(Val) ->
    enc_KeyWrapAlgorithm(Val, [<<48>>]).

enc_KeyWrapAlgorithm(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,
Objalgorithm = 
   'CMSECCAlgs-2009-02':'getenc_internal_object_set_argument_2'(                                   Cindex1),

%%-------------------------------------------------
%% attribute algorithm(1) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_object_identifier(Cindex1, [<<6>>]),

%%-------------------------------------------------
%% attribute parameters(2) with type typefieldParams OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            {TmpBytes2,_ } = Objalgorithm('Params', Cindex2, []),
   encode_open_type(TmpBytes2, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_KeyWrapAlgorithm(Tlv) ->
   dec_KeyWrapAlgorithm(Tlv, [16]).

dec_KeyWrapAlgorithm(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute algorithm(1) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_object_identifier(V1, [6]),

%%-------------------------------------------------
%% attribute parameters(2) with type typefieldParams OPTIONAL
%%-------------------------------------------------
{Tmpterm1,Tlv3} = case Tlv2 of
[V2|TempTlv3] ->
    {decode_open_type(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

DecObjalgorithmTerm1 =
   'CMSECCAlgs-2009-02':'getdec_internal_object_set_argument_2'(Term1),
Term2 = 
   case Tmpterm1 of
      asn1_NOVALUE ->asn1_NOVALUE;
      _ ->
         case (catch DecObjalgorithmTerm1('Params', Tmpterm1, [])) of
            {'EXIT', Reason1} ->
               exit({'Type not compatible with table constraint',Reason1});
            Tmpterm2 ->
               Tmpterm2
         end
   end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'KeyWrapAlgorithm',Term1,Term2},
Res1.


%%================================
%%  MQVuserKeyingMaterial
%%================================
enc_MQVuserKeyingMaterial(Val) ->
    enc_MQVuserKeyingMaterial(Val, [<<48>>]).

enc_MQVuserKeyingMaterial(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute ephemeralPublicKey(1)   External CryptographicMessageSyntax-2009:OriginatorPublicKey
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'CryptographicMessageSyntax-2009':'enc_OriginatorPublicKey'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute addedukm(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<4>>,<<160>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_MQVuserKeyingMaterial(Tlv) ->
   dec_MQVuserKeyingMaterial(Tlv, [16]).

dec_MQVuserKeyingMaterial(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ephemeralPublicKey(1)   External CryptographicMessageSyntax-2009:OriginatorPublicKey
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'CryptographicMessageSyntax-2009':'dec_OriginatorPublicKey'(V1, [16]),

%%-------------------------------------------------
%% attribute addedukm(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, [4]), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'MQVuserKeyingMaterial',Term1,Term2},
Res1.


%%================================
%%  ECC-CMS-SharedInfo
%%================================
'enc_ECC-CMS-SharedInfo'(Val) ->
    'enc_ECC-CMS-SharedInfo'(Val, [<<48>>]).

'enc_ECC-CMS-SharedInfo'(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute keyInfo(1)   External CMSECCAlgs-2009-02:KeyWrapAlgorithm
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_KeyWrapAlgorithm'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute entityUInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<4>>,<<160>>])
       end,

%%-------------------------------------------------
%% attribute suppPubInfo(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<4>>,<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ECC-CMS-SharedInfo'(Tlv) ->
   'dec_ECC-CMS-SharedInfo'(Tlv, [16]).

'dec_ECC-CMS-SharedInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute keyInfo(1)   External CMSECCAlgs-2009-02:KeyWrapAlgorithm
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_KeyWrapAlgorithm'(V1, [16]),

%%-------------------------------------------------
%% attribute entityUInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, [4]), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute suppPubInfo(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074,4]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ECC-CMS-SharedInfo',Term1,Term2,Term3},
Res1.
'x9-63-scheme'() ->
{1,3,133,16,840,63,0}.

'secg-scheme'() ->
{1,3,132,1}.

'dhSinglePass-stdDH-sha1kdf-scheme'() ->
{1,3,133,16,840,63,0,2}.

'dhSinglePass-stdDH-sha224kdf-scheme'() ->
{1,3,132,1,11,0}.

'dhSinglePass-stdDH-sha256kdf-scheme'() ->
{1,3,132,1,11,1}.

'dhSinglePass-stdDH-sha384kdf-scheme'() ->
{1,3,132,1,11,2}.

'dhSinglePass-stdDH-sha512kdf-scheme'() ->
{1,3,132,1,11,3}.

'dhSinglePass-cofactorDH-sha1kdf-scheme'() ->
{1,3,133,16,840,63,0,3}.

'dhSinglePass-cofactorDH-sha224kdf-scheme'() ->
{1,3,132,1,14,0}.

'dhSinglePass-cofactorDH-sha256kdf-scheme'() ->
{1,3,132,1,14,1}.

'dhSinglePass-cofactorDH-sha384kdf-scheme'() ->
{1,3,132,1,14,2}.

'dhSinglePass-cofactorDH-sha512kdf-scheme'() ->
{1,3,132,1,14,3}.

'mqvSinglePass-sha1kdf-scheme'() ->
{1,3,133,16,840,63,0,16}.

'mqvSinglePass-sha224kdf-scheme'() ->
{1,3,132,1,15,0}.

'mqvSinglePass-sha256kdf-scheme'() ->
{1,3,132,1,15,1}.

'mqvSinglePass-sha384kdf-scheme'() ->
{1,3,132,1,15,2}.

'mqvSinglePass-sha512kdf-scheme'() ->
{1,3,132,1,15,3}.

'id-hmacWithSHA224'() ->
{1,2,840,113549,2,8}.

'id-hmacWithSHA256'() ->
{1,2,840,113549,2,9}.

'id-hmacWithSHA384'() ->
{1,2,840,113549,2,10}.

'id-hmacWithSHA512'() ->
{1,2,840,113549,2,11}.




%%================================
%%  kaa-dhSinglePass-stdDH-sha1kdf-scheme
%%================================
'enc_kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-stdDH-sha1kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-stdDH-sha1kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'(H, Bytes, T).

tlv_format(Bytes) when is_binary(Bytes) ->
  {Tlv,_} = ber_decode_nif(Bytes),
  Tlv;
tlv_format(Bytes) ->
  Bytes.



%%================================
%%  kaa-dhSinglePass-stdDH-sha224kdf-scheme
%%================================
'enc_kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-stdDH-sha224kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-stdDH-sha224kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-stdDH-sha256kdf-scheme
%%================================
'enc_kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-stdDH-sha256kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-stdDH-sha256kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-stdDH-sha384kdf-scheme
%%================================
'enc_kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-stdDH-sha384kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-stdDH-sha384kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-stdDH-sha512kdf-scheme
%%================================
'enc_kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-stdDH-sha512kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-stdDH-sha512kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-cofactorDH-sha1kdf-scheme
%%================================
'enc_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-cofactorDH-sha224kdf-scheme
%%================================
'enc_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-cofactorDH-sha256kdf-scheme
%%================================
'enc_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-cofactorDH-sha384kdf-scheme
%%================================
'enc_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-dhSinglePass-cofactorDH-sha512kdf-scheme
%%================================
'enc_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'(H, Val, T).


'dec_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-mqvSinglePass-sha1kdf-scheme
%%================================
'enc_kaa-mqvSinglePass-sha1kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-mqvSinglePass-sha1kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-mqvSinglePass-sha1kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-mqvSinglePass-sha1kdf-scheme'(H, Val, T).


'dec_kaa-mqvSinglePass-sha1kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-mqvSinglePass-sha1kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-mqvSinglePass-sha1kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-mqvSinglePass-sha1kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-mqvSinglePass-sha224kdf-scheme
%%================================
'enc_kaa-mqvSinglePass-sha224kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-mqvSinglePass-sha224kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-mqvSinglePass-sha224kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-mqvSinglePass-sha224kdf-scheme'(H, Val, T).


'dec_kaa-mqvSinglePass-sha224kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-mqvSinglePass-sha224kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-mqvSinglePass-sha224kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-mqvSinglePass-sha224kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-mqvSinglePass-sha256kdf-scheme
%%================================
'enc_kaa-mqvSinglePass-sha256kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-mqvSinglePass-sha256kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-mqvSinglePass-sha256kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-mqvSinglePass-sha256kdf-scheme'(H, Val, T).


'dec_kaa-mqvSinglePass-sha256kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-mqvSinglePass-sha256kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-mqvSinglePass-sha256kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-mqvSinglePass-sha256kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-mqvSinglePass-sha384kdf-scheme
%%================================
'enc_kaa-mqvSinglePass-sha384kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-mqvSinglePass-sha384kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-mqvSinglePass-sha384kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-mqvSinglePass-sha384kdf-scheme'(H, Val, T).


'dec_kaa-mqvSinglePass-sha384kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-mqvSinglePass-sha384kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-mqvSinglePass-sha384kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-mqvSinglePass-sha384kdf-scheme'(H, Bytes, T).




%%================================
%%  kaa-mqvSinglePass-sha512kdf-scheme
%%================================
'enc_kaa-mqvSinglePass-sha512kdf-scheme'('Params', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]);
'enc_kaa-mqvSinglePass-sha512kdf-scheme'('Ukm', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_kaa-mqvSinglePass-sha512kdf-scheme'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-kaa-mqvSinglePass-sha512kdf-scheme'(H, Val, T).


'dec_kaa-mqvSinglePass-sha512kdf-scheme'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]);
'dec_kaa-mqvSinglePass-sha512kdf-scheme'('Ukm',  Bytes,_) ->
   Bytes;
'dec_kaa-mqvSinglePass-sha512kdf-scheme'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-kaa-mqvSinglePass-sha512kdf-scheme'(H, Bytes, T).




%%================================
%%  maca-hMAC-SHA224
%%================================
'enc_maca-hMAC-SHA224'('Params', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_maca-hMAC-SHA224'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-hMAC-SHA224'(H, Val, T).


'dec_maca-hMAC-SHA224'('Params',  Bytes,_) ->
   Bytes;
'dec_maca-hMAC-SHA224'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-hMAC-SHA224'(H, Bytes, T).




%%================================
%%  maca-hMAC-SHA256
%%================================
'enc_maca-hMAC-SHA256'('Params', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_maca-hMAC-SHA256'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-hMAC-SHA256'(H, Val, T).


'dec_maca-hMAC-SHA256'('Params',  Bytes,_) ->
   Bytes;
'dec_maca-hMAC-SHA256'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-hMAC-SHA256'(H, Bytes, T).




%%================================
%%  maca-hMAC-SHA384
%%================================
'enc_maca-hMAC-SHA384'('Params', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_maca-hMAC-SHA384'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-hMAC-SHA384'(H, Val, T).


'dec_maca-hMAC-SHA384'('Params',  Bytes,_) ->
   Bytes;
'dec_maca-hMAC-SHA384'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-hMAC-SHA384'(H, Bytes, T).




%%================================
%%  maca-hMAC-SHA512
%%================================
'enc_maca-hMAC-SHA512'('Params', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_maca-hMAC-SHA512'(smimeCaps,  Val, [H|T]) ->
   'enc_cap-hMAC-SHA512'(H, Val, T).


'dec_maca-hMAC-SHA512'('Params',  Bytes,_) ->
   Bytes;
'dec_maca-hMAC-SHA512'(smimeCaps, Bytes,[H|T]) ->
   'dec_cap-hMAC-SHA512'(H, Bytes, T).




%%================================
%%  opka-ec
%%================================
'enc_opka-ec'('KeyValue', Val, _RestPrimFieldName) ->
   'PKIXAlgs-2009':enc_ECPoint(Val, [<<4>>]);
'enc_opka-ec'('Params', Val, _RestPrimFieldName) ->
   'enc_opka-ec_Params'(Val,[]);
'enc_opka-ec'('PrivateKey', Val, _RestPrimFieldName) ->
   {Val,0}.



%%================================
%%  opka-ec_Params
%%================================
'enc_opka-ec_Params'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      n ->
         encode_null(element(2,Val), [<<5>>]);
      p ->
         'PKIXAlgs-2009':'enc_ECParameters'(element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).



'dec_opka-ec'('KeyValue', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'PKIXAlgs-2009':dec_ECPoint(Tlv, [4]);
'dec_opka-ec'('Params', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_opka-ec_Params'(Tlv,[]);
'dec_opka-ec'('PrivateKey',  Bytes,_) ->
   Bytes.



'dec_opka-ec_Params'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'n'
    {5, V1} -> 
        {n, decode_null(V1, [])};


%% 'p'
    V1 = {6,_} -> 
        {p, 'PKIXAlgs-2009':'dec_ECParameters'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme
%%================================
'enc_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-mqvSinglePass-sha1kdf-scheme
%%================================
'enc_cap-kaa-mqvSinglePass-sha1kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-mqvSinglePass-sha1kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-mqvSinglePass-sha224kdf-scheme
%%================================
'enc_cap-kaa-mqvSinglePass-sha224kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-mqvSinglePass-sha224kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-mqvSinglePass-sha256kdf-scheme
%%================================
'enc_cap-kaa-mqvSinglePass-sha256kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-mqvSinglePass-sha256kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-mqvSinglePass-sha384kdf-scheme
%%================================
'enc_cap-kaa-mqvSinglePass-sha384kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-mqvSinglePass-sha384kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-kaa-mqvSinglePass-sha512kdf-scheme
%%================================
'enc_cap-kaa-mqvSinglePass-sha512kdf-scheme'('Type', Val, _RestPrimFieldName) ->
   enc_KeyWrapAlgorithm(Val, [<<48>>]).


'dec_cap-kaa-mqvSinglePass-sha512kdf-scheme'('Type', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   dec_KeyWrapAlgorithm(Tlv, [16]).




%%================================
%%  cap-hMAC-SHA224
%%================================
'enc_cap-hMAC-SHA224'('Type', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_cap-hMAC-SHA224'('Type',  Bytes,_) ->
   Bytes.




%%================================
%%  cap-hMAC-SHA256
%%================================
'enc_cap-hMAC-SHA256'('Type', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_cap-hMAC-SHA256'('Type',  Bytes,_) ->
   Bytes.




%%================================
%%  cap-hMAC-SHA384
%%================================
'enc_cap-hMAC-SHA384'('Type', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_cap-hMAC-SHA384'('Type',  Bytes,_) ->
   Bytes.




%%================================
%%  cap-hMAC-SHA512
%%================================
'enc_cap-hMAC-SHA512'('Type', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_cap-hMAC-SHA512'('Type',  Bytes,_) ->
   Bytes.




%%================================
%%  KeyAgreementAlgs
%%================================
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,0} ->
    fun 'enc_kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,1} ->
    fun 'enc_kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,2} ->
    fun 'enc_kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,3} ->
    fun 'enc_kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,0} ->
    fun 'enc_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,1} ->
    fun 'enc_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,2} ->
    fun 'enc_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,3} ->
    fun 'enc_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,0} ->
    fun 'enc_kaa-mqvSinglePass-sha224kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,1} ->
    fun 'enc_kaa-mqvSinglePass-sha256kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,2} ->
    fun 'enc_kaa-mqvSinglePass-sha384kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,3} ->
    fun 'enc_kaa-mqvSinglePass-sha512kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,2} ->
    fun 'enc_kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,3} ->
    fun 'enc_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3;
getenc_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,16} ->
    fun 'enc_kaa-mqvSinglePass-sha1kdf-scheme'/3;
getenc_KeyAgreementAlgs(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,0} ->
    fun 'dec_kaa-dhSinglePass-stdDH-sha224kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,1} ->
    fun 'dec_kaa-dhSinglePass-stdDH-sha256kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,2} ->
    fun 'dec_kaa-dhSinglePass-stdDH-sha384kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,11,3} ->
    fun 'dec_kaa-dhSinglePass-stdDH-sha512kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,0} ->
    fun 'dec_kaa-dhSinglePass-cofactorDH-sha224kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,1} ->
    fun 'dec_kaa-dhSinglePass-cofactorDH-sha256kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,2} ->
    fun 'dec_kaa-dhSinglePass-cofactorDH-sha384kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,14,3} ->
    fun 'dec_kaa-dhSinglePass-cofactorDH-sha512kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,0} ->
    fun 'dec_kaa-mqvSinglePass-sha224kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,1} ->
    fun 'dec_kaa-mqvSinglePass-sha256kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,2} ->
    fun 'dec_kaa-mqvSinglePass-sha384kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,132,1,15,3} ->
    fun 'dec_kaa-mqvSinglePass-sha512kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,2} ->
    fun 'dec_kaa-dhSinglePass-stdDH-sha1kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,3} ->
    fun 'dec_kaa-dhSinglePass-cofactorDH-sha1kdf-scheme'/3;
getdec_KeyAgreementAlgs(Id) when Id =:= {1,3,133,16,840,63,0,16} ->
    fun 'dec_kaa-mqvSinglePass-sha1kdf-scheme'/3;
getdec_KeyAgreementAlgs(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  KeyWrapAlgs
%%================================
getenc_KeyWrapAlgs(Id) when Id =:= {1,2,840,113549,1,9,16,3,6} ->
   fun(T,V,O) -> 'CryptographicMessageSyntaxAlgorithms-2009':'enc_kwa-3DESWrap'(T,V,O) end;
getenc_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,5} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes128-wrap'(T,V,O) end;
getenc_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,25} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes192-wrap'(T,V,O) end;
getenc_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,45} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes256-wrap'(T,V,O) end;
getenc_KeyWrapAlgs(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

getdec_KeyWrapAlgs(Id) when Id =:= {1,2,840,113549,1,9,16,3,6} ->
   fun(T,V,O) -> 'CryptographicMessageSyntaxAlgorithms-2009':'dec_kwa-3DESWrap'(T,V,O) end;
getdec_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,5} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes128-wrap'(T,V,O) end;
getdec_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,25} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes192-wrap'(T,V,O) end;
getdec_KeyWrapAlgs(Id) when Id =:= {2,16,840,1,101,3,4,1,45} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes256-wrap'(T,V,O) end;
getdec_KeyWrapAlgs(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MessageAuthAlgs
%%================================
getenc_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,8} ->
    fun 'enc_maca-hMAC-SHA224'/3;
getenc_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,9} ->
    fun 'enc_maca-hMAC-SHA256'/3;
getenc_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,10} ->
    fun 'enc_maca-hMAC-SHA384'/3;
getenc_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,11} ->
    fun 'enc_maca-hMAC-SHA512'/3;
getenc_MessageAuthAlgs(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

getdec_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,8} ->
    fun 'dec_maca-hMAC-SHA224'/3;
getdec_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,9} ->
    fun 'dec_maca-hMAC-SHA256'/3;
getdec_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,10} ->
    fun 'dec_maca-hMAC-SHA384'/3;
getdec_MessageAuthAlgs(Id) when Id =:= {1,2,840,113549,2,11} ->
    fun 'dec_maca-hMAC-SHA512'/3;
getdec_MessageAuthAlgs(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  OriginatorPKAlgorithms
%%================================
getenc_OriginatorPKAlgorithms(Id) when Id =:= {1,2,840,10045,2,1} ->
    fun 'enc_opka-ec'/3;
getenc_OriginatorPKAlgorithms(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

getdec_OriginatorPKAlgorithms(Id) when Id =:= {1,2,840,10045,2,1} ->
    fun 'dec_opka-ec'/3;
getdec_OriginatorPKAlgorithms(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SMimeCAPS
%%================================
getenc_SMimeCAPS({1,2,840,113549,2,8}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Val of
             {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
               {Bin,byte_size(Bin)}
           end
      end
   end;
getenc_SMimeCAPS({1,2,840,113549,2,9}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Val of
             {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
               {Bin,byte_size(Bin)}
           end
      end
   end;
getenc_SMimeCAPS({1,2,840,113549,2,10}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Val of
             {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
               {Bin,byte_size(Bin)}
           end
      end
   end;
getenc_SMimeCAPS({1,2,840,113549,2,11}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Val of
             {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
               {Bin,byte_size(Bin)}
           end
      end
   end;
getenc_SMimeCAPS({1,3,132,1,11,0}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,11,1}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,11,2}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,11,3}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,14,0}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,14,1}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,14,2}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,14,3}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,15,0}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,15,1}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,15,2}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,132,1,15,3}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,133,16,840,63,0,2}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,133,16,840,63,0,3}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS({1,3,133,16,840,63,0,16}) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'enc_KeyWrapAlgorithm'(Val)
      end
   end;
getenc_SMimeCAPS(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SMimeCAPS'({1,2,840,113549,2,8}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Bytes of
             Bin when is_binary(Bin) -> 
               {asn1_OPENTYPE,Bin};
             _ ->
               {asn1_OPENTYPE,ber_encode(Bytes)}
           end
      end
   end;
'getdec_SMimeCAPS'({1,2,840,113549,2,9}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Bytes of
             Bin when is_binary(Bin) -> 
               {asn1_OPENTYPE,Bin};
             _ ->
               {asn1_OPENTYPE,ber_encode(Bytes)}
           end
      end
   end;
'getdec_SMimeCAPS'({1,2,840,113549,2,10}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Bytes of
             Bin when is_binary(Bin) -> 
               {asn1_OPENTYPE,Bin};
             _ ->
               {asn1_OPENTYPE,ber_encode(Bytes)}
           end
      end
   end;
'getdec_SMimeCAPS'({1,2,840,113549,2,11}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
           case Bytes of
             Bin when is_binary(Bin) -> 
               {asn1_OPENTYPE,Bin};
             _ ->
               {asn1_OPENTYPE,ber_encode(Bytes)}
           end
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,11,0}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,11,1}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,11,2}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,11,3}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,14,0}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,14,1}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,14,2}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,14,3}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,15,0}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,15,1}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,15,2}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,132,1,15,3}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,133,16,840,63,0,2}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,133,16,840,63,0,3}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
'getdec_SMimeCAPS'({1,3,133,16,840,63,0,16}) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Type' ->
            'dec_KeyWrapAlgorithm'(Bytes)
      end
   end;
getdec_SMimeCAPS(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_2
%%================================
getenc_internal_object_set_argument_2(Id) when Id =:= {1,2,840,113549,1,9,16,3,6} ->
   fun(T,V,O) -> 'CryptographicMessageSyntaxAlgorithms-2009':'enc_kwa-3DESWrap'(T,V,O) end;
getenc_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,5} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes128-wrap'(T,V,O) end;
getenc_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,25} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes192-wrap'(T,V,O) end;
getenc_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,45} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'enc_kwa-aes256-wrap'(T,V,O) end;
getenc_internal_object_set_argument_2(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

getdec_internal_object_set_argument_2(Id) when Id =:= {1,2,840,113549,1,9,16,3,6} ->
   fun(T,V,O) -> 'CryptographicMessageSyntaxAlgorithms-2009':'dec_kwa-3DESWrap'(T,V,O) end;
getdec_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,5} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes128-wrap'(T,V,O) end;
getdec_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,25} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes192-wrap'(T,V,O) end;
getdec_internal_object_set_argument_2(Id) when Id =:= {2,16,840,1,101,3,4,1,45} ->
   fun(T,V,O) -> 'CMSAesRsaesOaep-2009':'dec_kwa-aes256-wrap'(T,V,O) end;
getdec_internal_object_set_argument_2(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.



%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_, L} | Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L) | Acc]);
collect_parts([{3, <<Unused,Bits/binary>>} | Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T, V} | Rest], Acc) ->
    collect_parts(Rest, [V | Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3, <<Unused,Bits/binary>>} | Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits | Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc | lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H | Al]).

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error, {asn1, {decode_null, Val}}})
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal | ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1, Val2} =
        if
            AddedObjVal < 40 ->
                {0, AddedObjVal};
            AddedObjVal < 80 ->
                {1, AddedObjVal - 40};
            true ->
                {2, AddedObjVal - 80}
        end,
    list_to_tuple([Val1, Val2 | ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type(Tlv, TagIn) ->
    case match_tags(Tlv, TagIn) of
        Bin when is_binary(Bin) ->
            {InnerTlv, _} = ber_decode_nif(Bin),
            InnerTlv;
        TlvBytes ->
            TlvBytes
    end.

e_object_identifier({'OBJECT IDENTIFIER', V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1, E2 | Tail]) ->
    Head = 40 * E1 + E2,
    {H, Lh} = mk_object_val(Head),
    {R, Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H | R], Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B, L} = mk_object_val(H),
    {B, Len + L}.

encode_length(L) when L =< 127 ->
    {[L], 1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len | Oct], Len + 1};
        true ->
            exit({error, {asn1, too_long_length_oct, Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar, LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag | Trest], BytesSoFar, LenSoFar) ->
    {Bytes2, L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag, Bytes2 | BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar, LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_ | _] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T, V}, [T]) ->
    V;
match_tags({T, V}, [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, V}], [T | Tt]) ->
    match_tags(V, Tt);
match_tags([{T, _V} | _] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag, _V} = Tlv, [T | _Tt]) ->
    exit({error, {asn1, {wrong_tag, {{expected, T}, {got, Tag, Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255 | Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack, Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128 | Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val], 1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).
